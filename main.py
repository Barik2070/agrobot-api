
from fastapi import FastAPI
from pydantic import BaseModel
from typing import Optional
import gspread
from datetime import datetime
from oauth2client.service_account import ServiceAccountCredentials

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("google-credentials.json", scope)
client = gspread.authorize(creds)

# –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ
sheet = client.open_by_url("https://docs.google.com/spreadsheets/d/1akbF7aSVo4uJVQdOFfPpHfM23xrAEi_s41Do2Ki-oTo/edit")
base_ws = sheet.worksheet("–ë–∞–∑–∞")
log_ws = sheet.worksheet("–õ–æ–≥")
feedback_ws = sheet.worksheet("GPT_Feedback")

app = FastAPI()

class AddRowRequest(BaseModel):
    –Ω–∞–∑–≤–∞: str
    –æ–±–ª–∞—Å—Ç—å: Optional[str] = ""
    —Ä–∞–π–æ–Ω: Optional[str] = ""
    –ø–ª–æ—â–∞: Optional[float] = 0
    –ø–æ–∫–∞–∑–Ω–∏–∫–∏: Optional[str] = ""
    –∫–æ–Ω—Ç–∞–∫—Ç–∏: Optional[str] = ""
    –Ω–æ—Ç–∞—Ç–∫–∞: Optional[str] = ""

@app.post("/add_row")
def add_row(data: AddRowRequest):
    headers = base_ws.row_values(1)
    existing_rows = base_ws.get_all_records()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏ (–ø–æ –Ω–∞–∑–≤—ñ)
    if any(row.get("–ù–∞–∑–≤–∞", "").strip().lower() == data.–Ω–∞–∑–≤–∞.strip().lower() for row in existing_rows):
        return {"status": "duplicate", "message": "–ö–ª—ñ—î–Ω—Ç —É–∂–µ —ñ—Å–Ω—É—î"}

    # –î–∏–Ω–∞–º—ñ—á–Ω–µ –º–∞–ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—è –∫–ª—é—á—ñ–≤ –¥–æ —Ä–µ–∞–ª—å–Ω–∏—Ö –Ω–∞–∑–≤ –∫–æ–ª–æ–Ω–æ–∫
    key_map = {}
    
    possible_matches = {
        "–Ω–∞–∑–≤–∞": ["–Ω–∞–∑–≤–∞", "–∫–æ–º–ø–∞–Ω—ñ—è", "–ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ"],
        "–æ–±–ª–∞—Å—Ç—å": ["–æ–±–ª–∞—Å—Ç—å"],
        "—Ä–∞–π–æ–Ω": ["—Ä–∞–π–æ–Ω"],
        "–ø–ª–æ—â–∞": ["–ø–ª–æ—â–∞", "–≥–∞"],
        "–ø–æ–∫–∞–∑–Ω–∏–∫–∏": ["–ø–æ–∫–∞–∑–Ω–∏–∫–∏", "–∫—É–ª—å—Ç—É—Ä–∏", "–≤–∏–¥–∏ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ"],
        "–∫–æ–Ω—Ç–∞–∫—Ç–∏": ["–∫–æ–Ω—Ç–∞–∫—Ç", "–∫–æ–Ω—Ç–∞–∫—Ç 1", "—Ç–µ–ª–µ—Ñ–æ–Ω", "–∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞ –æ—Å–æ–±–∞"],
        "–Ω–æ—Ç–∞—Ç–∫–∞": ["–Ω–æ—Ç–∞—Ç–∫–∞", "–ø—Ä–∏–º—ñ—Ç–∫–∞"]
    }

    for key, options in possible_matches.items():
        for header in headers:
            if header.lower() in options:
                key_map[key] = header
                break

    new_row = [""] * len(headers)
    for key, value in data.dict().items():
        mapped_key = key_map.get(key)
        if mapped_key and mapped_key in headers:
            idx = headers.index(mapped_key)
            new_row[idx] = str(value)

    print("üü° –î–æ–¥–∞—î–º–æ —Ä—è–¥–æ–∫ –¥–æ Google Sheets:", new_row)

    base_ws.append_row(new_row, value_input_option="USER_ENTERED")

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è
    log_ws.append_row([datetime.now().isoformat(), "–î–æ–¥–∞–Ω–æ", data.–Ω–∞–∑–≤–∞, data.–æ–±–ª–∞—Å—Ç—å, data.–ø–ª–æ—â–∞, data.–∫–æ–Ω—Ç–∞–∫—Ç–∏])

    return {"status": "OK", "message": f"–ö–ª—ñ—î–Ω—Ç–∞ {data.–Ω–∞–∑–≤–∞} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ"}
